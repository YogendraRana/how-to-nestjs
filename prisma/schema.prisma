generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Gender {
    MALE
    FEMALE
    OTHER
}

model User {
    id        String   @id @default(cuid())
    email     String   @unique
    phone     String?  @unique
    name      String
    gender    Gender
    dob       DateTime @map("date_of_birth") @db.Date
    password  String
    isPrivate Boolean  @default(false) @map("is_private_account")
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    refreshToken  RefreshToken?
    posts         Post[]
    comments      Comment[]
    post_reaction PostReaction[]
}

model Otp {
    id        String   @id @default(cuid())
    email     String?
    phone     String?
    code      Int
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
}

model RefreshToken {
    id               String   @id @default(cuid())
    refreshTokenHash String   @unique @map("refresh_token_hash")
    createdAt        DateTime @default(now()) @map("created_at")
    updatedAt        DateTime @updatedAt @map("updated_at")
    userId           String   @unique @map("user_id")

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
    id        String   @id @default(cuid())
    caption   String?
    location  String?
    isPrivate Boolean  @default(false) @map("is_private_post")
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
    userId    String   @map("user_id")

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    images        Image[]
    comments      Comment[]
    post_reaction PostReaction[]
}

model Image {
    id        String   @id @default(cuid())
    publicUrl String   @map("public_url")
    postUrl   String   @map("post_url")
    imageId   String   @map("image_id")
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
    postId    String   @map("post_id")

    post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Comment {
    id        String   @id @default(cuid())
    content   String
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
    userId    String
    postId    String   @map("post_id")
    parentId  String?  @map("parent_id")

    user     User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
    post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
    parent   Comment?  @relation(name: "Child_Comment", fields: [parentId], references: [id], onDelete: Cascade)
    children Comment[] @relation(name: "Child_Comment")
}

model Reaction {
    id        String   @id @default(cuid())
    name      String   @unique
    price     Int
    url       String
    imageId   String   @map("image_id")
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    post_reaction PostReaction[]
}

model PostReaction {
    id         String   @id @default(cuid())
    createdAt  DateTime @default(now()) @map("created_at")
    userId     String   @map("user_id")
    postId     String   @map("post_id")
    reactionId String   @map("reaction_id")

    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    reaction Reaction @relation(fields: [reactionId], references: [id], onDelete: Cascade)
}
