// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// enums
enum Gender {
    MALE
    FEMALE
    OTHER
}

model User {
    id          String    @id @default(cuid())
    email       String?   @unique
    phone       String?   @unique
    name        String?
    gender      Gender
    dateOfBirth DateTime? @map("date_of_birth") @db.Date
    password    String?
    isPrivate   Boolean   @default(false) @map("is_private")

    refreshToken RefreshToken?
    post         Post[]

    createdAt DateTime  @default(now()) @map("created_at")
    updatedAt DateTime  @updatedAt @map("updated_at")
    Comment   Comment[]
}

model Otp {
    id    String  @id @default(cuid())
    email String?
    phone String?
    code  String

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
}

model RefreshToken {
    id               String @id @default(cuid())
    refreshTokenHash String @unique @map("refresh_token_hash")

    user   User   @relation(fields: [userId], references: [id])
    userId String @unique @map("user_id")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
}

model Post {
    id       String  @id @default(cuid())
    images   Json[]
    caption  String
    location String
    isPublic Boolean @default(true)

    user   User   @relation(fields: [userId], references: [id])
    userId String @map("user_id")

    Comment Comment[]

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
}

model Comment {
    id      String @id @default(cuid())
    content String

    parentId String? @map("parent_id")
    parent   Comment?  @relation("Comment_Children", fields: [parentId], references: [id])
    children Comment[] @relation("Comment_Children")

    userId String
    user   User?  @relation(fields: [userId], references: [id])

    postId String @map("post_id")
    post   Post   @relation(fields: [postId], references: [id])

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
}
